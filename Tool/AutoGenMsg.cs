using Core;
using MessagePack;
using Share;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tool
{
    /// <summary>
    /// 消息ID注册表，维护所有消息类型的ID映射
    /// </summary>
    public static class MessageRegistry
    {
        private static readonly Dictionary<int, Type> _messageTypes = new();
        private static readonly Dictionary<Type, int> _messageIds = new();
        private static readonly object _lock = new();
        private static int _nextId = 1000; // 起始ID

        /// <summary>
        /// 初始化注册表
        /// </summary>
        public static void Initialize()
        {
            lock (_lock)
            {
                _messageTypes.Clear();
                _messageIds.Clear();

                // 扫描所有Message子类
                var messageType = typeof(Message);
                var assemblies = AppDomain.CurrentDomain.GetAssemblies();

                foreach (var assembly in assemblies)
                {
                    foreach (var type in assembly.GetTypes()
                        .Where(t => t.IsClass && !t.IsAbstract && messageType.IsAssignableFrom(t)))
                    {
                        if (type == messageType) continue;

                        // 自动分配ID
                        if (!_messageIds.ContainsKey(type))
                        {
                            var id = _nextId++;
                            _messageIds[type] = id;
                            _messageTypes[id] = type;
                        }
                    }
                }

                // 保存到文件
                SaveToFile();
            }
        }

        /// <summary>
        /// 获取消息类型对应的ID
        /// </summary>
        public static int GetMessageId(Type messageType)
        {
            lock (_lock)
            {
                return _messageIds.TryGetValue(messageType, out var id) ? id : -1;
            }
        }

        /// <summary>
        /// 根据ID获取消息类型
        /// </summary>
        public static Type GetMessageType(int messageId)
        {
            lock (_lock)
            {
                return _messageTypes.TryGetValue(messageId, out var type) ? type : null;
            }
        }

        /// <summary>
        /// 保存ID映射到文件
        /// </summary>
        private static void SaveToFile()
        {
            var path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "MessageDefinitions.cs");
            var content = GenerateMessageDefinitions();
            File.WriteAllText(path, content);
        }

        /// <summary>
        /// 生成消息定义文件内容
        /// </summary>
        private static string GenerateMessageDefinitions()
        {
            var sb = new System.Text.StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// 此文件由MessageRegistry自动生成，请勿手动修改");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
            sb.AppendLine("using MessagePack;");
            sb.AppendLine();
            sb.AppendLine("public static class MessageIds");
            sb.AppendLine("{");

            // 添加ID常量定义
            foreach (var kvp in _messageIds.OrderBy(x => x.Value))
            {
                sb.AppendLine($"    public const int {kvp.Key.Name} = {kvp.Value};");
            }

            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("public static class MessageTypes");
            sb.AppendLine("{");
            sb.AppendLine("    public static readonly System.Collections.Generic.Dictionary<int, System.Type> Mapping = new()");
            sb.AppendLine("    {");

            // 添加类型映射
            foreach (var kvp in _messageTypes.OrderBy(x => x.Key))
            {
                sb.AppendLine($"        {{ {kvp.Key}, typeof({kvp.Value.FullName}) }},");
            }

            sb.AppendLine("    };");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
